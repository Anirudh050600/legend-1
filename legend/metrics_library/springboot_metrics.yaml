component: springboot
data_source: Prometheus
metrics_source: built-in (using actuator)
reference: https://spring.io/projects/spring-boot
description: Spring Boot is an open source Java-based framework used to create a micro Service.
panels:
  - title: (R) Rate of requests (qps) - aggregated over all methods
    type: Graph
    description: qps
    targets:
    {% for dimension in data %}
      - metric: sum(rate(http_server_requests_seconds_count{job=~"{{ dimension.job }}"}[5m]))
        legend: Aggregate
      - metric: sum(rate(http_server_requests_seconds_count{job=~"{{ dimension.job }}"}[5m])) by (instance)
        legend: '{{ '{{instance}}' }}'
    {% endfor %}

  - title: (R) Rate of requests per API
    type: Graph
    description: qps per API
    targets:
    {% for dimension in data %}
      - metric: sum(rate(http_server_requests_seconds_count{job=~"{{ dimension.job }}"}[5m])) by (uri,method)
        legend: '{{ '{{method}} - {{uri}}' }}'
    {% endfor %}

  - title: (E) Error rate - aggregated over all methods (4xx)
    type: Graph
    description: 4xx Error rate at service level. Client side errors
    targets:
    {% for dimension in data %}
      - metric: sum(rate(http_server_requests_seconds_count{job=~"{{ dimension.job }}",status =~ "4.."}[5m]))
        legend: Aggregate
      - metric: sum(rate(http_server_requests_seconds_count{job=~"{{ dimension.job }}", status =~ "4.."}[5m])) by (instance)
        legend: '{{ '{{instance}}' }}'
    {% endfor %}

  - title: (E) Error rate - per API (4xx)
    type: Graph
    description: error per API. Client side errors
    targets:
    {% for dimension in data %}
      - metric: sum(rate(http_server_requests_seconds_count{job=~"{{ dimension.job }}", status =~ "4.."}[5m])) by (uri,method)
        legend: '{{ '{{method}} - {{uri}}' }}'
    {% endfor %}

  - title: (E) Error rate - aggregated over all methods (5xx)
    type: Graph
    description: 5xx Error rate at service level. Server side errors
    targets:
    {% for dimension in data %}
      - metric: sum(rate(http_server_requests_seconds_count{job=~"{{ dimension.job }}",status =~ "5.."}[5m]))
        legend: Aggregate
        ref_no: 1
      - metric: sum(rate(http_server_requests_seconds_count{job=~"{{ dimension.job }}", status =~ "5.."}[5m])) by (instance)
        legend: '{{ '{{instance}}' }}'
        ref_no: 2
    {% endfor %}
    alert_config:
      priority: P3
      message: 'High error rate (5xx)'
      rule:
        for_duration: 5m
        evaluate_every: 10s
      condition_query:
        - OR,avg,1,now,5m,gt,20
        - OR,avg,2,now,5m,gt,30

  - title: (E) Error rate - per API (5xx)
    type: Graph
    description: error per API. Server side errors
    targets:
    {% for dimension in data %}
      - metric: sum(rate(http_server_requests_seconds_count{job=~"{{ dimension.job }}", status =~ "5.."}[5m])) by (uri,method)
        legend: '{{ '{{method}} - {{uri}}' }}'
        ref_no: 1
    {% endfor %}
    alert_config:
      priority: P3
      message: 'High error rate - per API (5xx)'
      rule:
        for_duration: 5m
        evaluate_every: 10s
      condition_query:
        - OR,avg,1,now,5m,gt,5

  - title: (D) Avg Latency  - aggregated over all methods
    type: Graph
    description: overall latency
    targets:
    {% for dimension in data %}
      - metric: sum(rate(http_server_requests_seconds_count{job=~"{{ dimension.job }}"}[5m]))
        legend: Aggregate
      - metric: sum(rate(http_server_requests_seconds_count{job=~"{{ dimension.job }}"}[5m])) by (instance)
        legend: '{{ '{{instance}}' }}'
    {% endfor %}

  - title: (D) Avg Latency  - per API
    type: Graph
    description: API level latency
    targets:
    {% for dimension in data %}
      - metric: sum(rate(http_server_requests_seconds_count{job=~"{{ dimension.job }}"}[5m])) by (uri,method)
        legend: '{{ '{{method}} - {{uri}}' }}'
    {% endfor %}

  - title: (D) Latency over all methods (99th percentile)
    type: Graph
    description: overall latency
    targets:
    {% for dimension in data %}
      - metric: histogram_quantile(0.99, sum(rate(http_server_requests_seconds_bucket{job=~"{{ dimension.job }}"}[5m])) by (le))
        legend: Aggregate
        ref_no: 1
      - metric: histogram_quantile(0.99, sum(rate(http_server_requests_seconds_bucket{job=~"{{ dimension.job }}"}[5m])) by (instance,le))
        legend: '{{ '{{instance}}' }}'
        ref_no: 2
    {% endfor %}
    alert_config:
      priority: P3
      message: 'High latency'
      rule:
        for_duration: 5m
        evaluate_every: 10s
      condition_query:
        - OR,avg,1,now,5m,gt,5
        - OR,avg,2,now,5m,gt,10

  - title: (D) Latency per API (99th percentile)
    type: Graph
    description: API level latency
    targets:
    {% for dimension in data %}
      - metric: histogram_quantile(0.99, sum(rate(http_server_requests_seconds_bucket{job=~"{{ dimension.job }}"}[5m])) by (uri,method,le))
        legend: '{{ '{{method}} - {{uri}}' }}'
        ref_no: 1
    {% endfor %}
    alert_config:
      priority: P3
      message: 'High latency - per API'
      rule:
        for_duration: 5m
        evaluate_every: 10s
      condition_query:
        - OR,avg,1,now,5m,gt,10
